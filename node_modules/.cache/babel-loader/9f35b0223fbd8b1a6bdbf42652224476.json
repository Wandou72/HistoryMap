{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vShow as _vShow, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"height\", \"width\"];\nconst _hoisted_2 = [\"x\", \"fill\"];\nconst _hoisted_3 = [\"dx\"];\nconst _hoisted_4 = [\"x\", \"fill\"];\nconst _hoisted_5 = [\"dx\"];\nconst _hoisted_6 = [\"x\", \"fill\"];\nconst _hoisted_7 = [\"dx\"];\nconst _hoisted_8 = [\"transform\"];\nconst _hoisted_9 = {\n  id: \"outerLinks\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  id: \"outerCircle\"\n};\nconst _hoisted_11 = [\"d\", \"fill\", \"transform\"];\nconst _hoisted_12 = [\"cx\", \"cy\", \"fill\", \"onMouseover\", \"onClick\"];\nconst _hoisted_13 = {\n  id: \"innerLinks\"\n};\n\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"g\", {\n  id: \"innerGraph\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_15 = {\n  key: 0,\n  id: \"tip\"\n};\nconst _hoisted_16 = [\"width\", \"x\", \"y\"];\nconst _hoisted_17 = [\"dx\", \"dy\"];\nconst _hoisted_18 = [\"dx\", \"dy\"];\nconst _hoisted_19 = [\"dx\", \"dy\"];\nconst _hoisted_20 = [\"dx\", \"dy\"];\nconst _hoisted_21 = [\"src\"];\n\nconst _hoisted_22 = /*#__PURE__*/_createTextVNode(\" > \");\n\nconst _hoisted_23 = {\n  key: 1,\n  id: \"tip\"\n};\nconst _hoisted_24 = [\"width\", \"x\", \"y\"];\nconst _hoisted_25 = [\"dx\", \"dy\"];\nconst _hoisted_26 = [\"dx\", \"dy\"];\nconst _hoisted_27 = [\"dx\", \"dy\"];\nconst _hoisted_28 = [\"dx\", \"dy\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"svg\", {\n    id: \"graphSvg\",\n    height: $data.svgConfig.height,\n    width: $data.svgConfig.width,\n    onClick: _cache[4] || (_cache[4] = $event => $options.log())\n  }, [_createCommentVNode(\" <g id = 'matrix'\\n      transform = 'translate(0,-20)'>\\n        <g class = 'weight' v-for = '(d,i) in cluster'\\n        :key = 'i'>\\n          <rect\\n          :x = 'i * (500/cluster.length) + 5+20 + svgConfig.width - 600'\\n          y = 725\\n          :height = 'lenScale(getWeight(d))'\\n          :width = '500/cluster.length-15'\\n          fill = '#54f2f3'\\n          rx = 5\\n          \\n          >\\n          </rect>\\n          <text\\n          :dx = 'i * (500/cluster.length) + 5 +(500/cluster.length-15)/2 +20 + svgConfig.width - 600'\\n          :dy = '740 + lenScale(getWeight(d))'\\n          fill = 'black'\\n          text-anchor = 'middle'\\n          font-weight = 'bold'\\n          font-size = 12\\n          \\n          >\\n            {{(getWeight(d)/maxWeight).toFixed(2)}}\\n          </text>\\n        </g>\\n        <g class = 'row' v-for = '(d,i) in community'\\n        :key = 'i'>\\n          <rect v-for = '(k,j) in d'\\n          :key = 'j'\\n          :x = 'j * (500/d.length) + 20 + svgConfig.width - 600'\\n          :y = 'i * (550/community.length) + 20 + 150'\\n          :height = '550/community.length - 5'\\n          :width = '500/d.length-5'\\n          :fill = 'k == 1?getColor(i,j):\\\"lightgrey\\\"'\\n          stroke = 'white'\\n          :stroke-width = 'cluster[j].nodes[0].index == i? 10:0'\\n          stroke-dasharray = '4'\\n          \\n          >\\n          </rect>\\n          <text\\n          :dx = 'svgConfig.width - 600 + 10'\\n          :dy = '(i+0.5) * (550/community.length) + 25 + 150 '\\n          text-anchor = 'end'\\n          fill = 'black'\\n          >\\n            {{dataNodes[i].type == 'attribute'?dataNodes[i].name:dataNodes[i].name.length>=8? dataNodes[i].name.substring(0,8) + '..':dataNodes[i].name}}\\n          </text>\\n        </g>\\n        <text v-for = '(d,i) in cluster'\\n        :key = 'i'\\n        :dx = 'cluster.length<9?(i+0.5) * (500/cluster.length) + 20 + svgConfig.width - 600 :(i+0.5) * (500/cluster.length) + 17 + svgConfig.width - 600'\\n        dy = 165\\n        text-anchor = 'middle'\\n        font-weight = 'bold'\\n        :font-size = 'cluster.length<9? 24 : 15'\\n        fill = 'black'\\n        @mouseover = 'clusterHighlight(i)'\\n        @mouseout = 'outerOut()'\\n        >\\n            {{i+1}}\\n        </text>\\n        <text \\n        :dx = '120+svgConfig.width - 450'\\n        dy = 135\\n        font-size = 25\\n        font-weight = 'bold'\\n        fill = 'black'\\n        text-anchor = 'middle'>\\n          cluster\\n        </text>\\n        <text\\n        :dx = '120+svgConfig.width - 450'\\n        dy = 835\\n        font-size = 25\\n        font-weight = 'bold'\\n        fill = 'black'\\n        text-anchor = 'middle'>\\n          weight\\n        </text>\\n      </g> \"), _createElementVNode(\"g\", {\n    onClick: _cache[0] || (_cache[0] = $event => $data.innerLinkFlag = !$data.innerLinkFlag)\n  }, [_createElementVNode(\"rect\", {\n    id: \"btnIndexLink\",\n    x: $data.svgConfig.width - 110,\n    y: 20,\n    fill: $data.innerLinkFlag ? \"#5aeaf1\" : \"lightgrey\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_2), _createElementVNode(\"text\", {\n    dx: $data.svgConfig.width - 65,\n    dy: 45,\n    fill: \"black\",\n    \"text-anchor\": \"middle\"\n  }, \" inner link \", 8\n  /* PROPS */\n  , _hoisted_3)]), _createElementVNode(\"g\", {\n    onClick: _cache[1] || (_cache[1] = $event => $data.outerLinkFlag = !$data.outerLinkFlag)\n  }, [_createElementVNode(\"rect\", {\n    id: \"btnIndexLink\",\n    x: $data.svgConfig.width - 210,\n    y: 20,\n    fill: $data.outerLinkFlag ? \"#5aeaf1\" : \"lightgrey\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_4), _createElementVNode(\"text\", {\n    dx: $data.svgConfig.width - 165,\n    dy: 45,\n    fill: \"black\",\n    \"text-anchor\": \"middle\"\n  }, \" outer link \", 8\n  /* PROPS */\n  , _hoisted_5)]), _createElementVNode(\"g\", {\n    onClick: _cache[2] || (_cache[2] = $event => (this.$store.commit(\"changeStoryBtn\"), this.$store.commit({\n      type: `changeStoryText`,\n      text: $options.storyTest\n    })))\n  }, [_createElementVNode(\"rect\", {\n    id: \"btnIndexLink\",\n    x: $data.svgConfig.width - 310,\n    y: 20,\n    fill: this.$store.state.story.btn ? \"#5aeaf1\" : \"lightgrey\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_6), _createElementVNode(\"text\", {\n    dx: $data.svgConfig.width - 265,\n    dy: 45,\n    fill: \"black\",\n    \"text-anchor\": \"middle\"\n  }, \" Show story \", 8\n  /* PROPS */\n  , _hoisted_7)]), _createElementVNode(\"g\", {\n    id: \"graph\",\n    transform: \"translate(\" + [-$data.svgConfig.width * 0.2, 0] + \")\"\n  }, [_withDirectives(_createElementVNode(\"g\", _hoisted_9, null, 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.outerLinkFlag]]), $options.actionList.length > 4 ? (_openBlock(), _createElementBlock(\"g\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.arcData, (d, i) => {\n    return _openBlock(), _createElementBlock(\"path\", {\n      key: i,\n      d: $options.arc(d, i),\n      fill: d.color,\n      \"fill-opacity\": \"0.8\",\n      transform: 'translate(' + [$data.svgConfig.width / 2, $data.svgConfig.height / 2] + ')'\n    }, null, 8\n    /* PROPS */\n    , _hoisted_11);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.actionNodes, (d, i) => {\n    return _openBlock(), _createElementBlock(\"circle\", {\n      key: i,\n      cx: d.xy[0],\n      cy: d.xy[1],\n      r: \"10\",\n      fill: $data.color(d.data.view),\n      stroke: \"white\",\n      onMouseover: $event => ($options.outerTip(d), $options.outerHighlight(d)),\n      onMouseout: _cache[3] || (_cache[3] = $event => ($data.hover.flag = false, $options.outerOut())),\n      onClick: $event => $options.rebuildState(d.states)\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_12);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"g\", _hoisted_13, null, 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.innerLinkFlag]]), _hoisted_14], 8\n  /* PROPS */\n  , _hoisted_8), $data.hover.flag && $data.hover.type == \"outer\" ? (_openBlock(), _createElementBlock(\"g\", _hoisted_15, [_createElementVNode(\"rect\", {\n    height: \"180\",\n    width: $data.hover.data.data.desc0.length > 20 ? ($data.hover.data.data.desc0.length + 4) * 12 : 300,\n    fill: \"black\",\n    \"fill-opacity\": \"0.7\",\n    x: $data.XY[0] + 10 - $data.svgConfig.width * 0.2,\n    y: $data.XY[1] - 30,\n    rx: \"20\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_16), _createElementVNode(\"text\", {\n    fill: \"red\",\n    \"font-size\": \"24\",\n    dx: $data.XY[0] + 20 - this.svgConfig.width * 0.2,\n    dy: $data.XY[1] - 5\n  }, _toDisplayString($data.hover.data.data.desc0), 9\n  /* TEXT, PROPS */\n  , _hoisted_17), _createElementVNode(\"text\", {\n    fill: \"white\",\n    dx: $data.XY[0] + 20 - this.svgConfig.width * 0.2,\n    dy: $data.XY[1] + 15\n  }, \"Interaction: \" + _toDisplayString($data.hover.data.data.obj), 9\n  /* TEXT, PROPS */\n  , _hoisted_18), _createElementVNode(\"text\", {\n    fill: \"white\",\n    dx: $data.XY[0] + 20 - this.svgConfig.width * 0.2,\n    dy: $data.XY[1] + 35\n  }, \"View: \" + _toDisplayString($data.hover.data.data.view.substring($data.hover.data.data.view.length - 1, $data.hover.data.data.view.length)), 9\n  /* TEXT, PROPS */\n  , _hoisted_19), _createElementVNode(\"text\", {\n    fill: \"white\",\n    dx: $data.XY[0] + 20 - this.svgConfig.width * 0.2,\n    dy: $data.XY[1] + 55\n  }, \"Time stamp: \" + _toDisplayString($data.hover.data.data.timeStamp.toFixed(2)), 9\n  /* TEXT, PROPS */\n  , _hoisted_20), _createElementVNode(\"div\", null, [_createElementVNode(\"img\", {\n    src: $data.hover.data.data.pic\n  }, null, 8\n  /* PROPS */\n  , _hoisted_21)]), _hoisted_22, _createCommentVNode(\" <text :dx = 'XY[0]+20' :dy = 'XY[1] +55'>{{'data:'+hover.data.data}}</text>\\n        <text :dx = 'XY[0]+20' :dy = 'XY[1] +75'>{{'type:' +(hover.data.lastTime?(\\\"hover for \\\"+hover.data.lastTime.toFixed(2) + \\\" seconds\\\"):\\\"click\\\")}}</text> \")])) : _createCommentVNode(\"v-if\", true), $data.hover.flag && $data.hover.type == \"inner\" ? (_openBlock(), _createElementBlock(\"g\", _hoisted_23, [_createElementVNode(\"rect\", {\n    height: \"100\",\n    width: $data.hover.data.name.length > 10 ? ($data.hover.data.name.length + 5) * 15 + 10 : 230,\n    fill: \"black\",\n    \"fill-opacity\": \"0.7\",\n    x: $data.XY[0] + 10,\n    y: $data.XY[1] - 30,\n    rx: \"20\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_24), _createElementVNode(\"text\", {\n    fill: \"white\",\n    dx: $data.XY[0] + 20,\n    dy: $data.XY[1] - 5\n  }, \"Name: \" + _toDisplayString($data.hover.data.name), 9\n  /* TEXT, PROPS */\n  , _hoisted_25), _createElementVNode(\"text\", {\n    fill: \"white\",\n    dx: $data.XY[0] + 20,\n    dy: $data.XY[1] + 15\n  }, \"Type: \" + _toDisplayString($data.hover.data.type), 9\n  /* TEXT, PROPS */\n  , _hoisted_26), _createElementVNode(\"text\", {\n    fill: \"white\",\n    dx: $data.XY[0] + 20,\n    dy: $data.XY[1] + 35\n  }, \"Count: \" + _toDisplayString($data.hover.data.count), 9\n  /* TEXT, PROPS */\n  , _hoisted_27), _createElementVNode(\"text\", {\n    fill: \"white\",\n    dx: $data.XY[0] + 20,\n    dy: $data.XY[1] + 55\n  }, \"Duration: \" + _toDisplayString($data.hover.data.dura), 9\n  /* TEXT, PROPS */\n  , _hoisted_28), _createCommentVNode(\" <text :dx = 'XY[0]+20' :dy = 'XY[1] +55'>{{'data:'+hover.data.data}}</text>\\n        <text :dx = 'XY[0]+20' :dy = 'XY[1] +75'>{{'type:' +(hover.data.lastTime?(\\\"hover for \\\"+hover.data.lastTime.toFixed(2) + \\\" seconds\\\"):\\\"click\\\")}}</text> \")])) : _createCommentVNode(\"v-if\", true)], 8\n  /* PROPS */\n  , _hoisted_1);\n}","map":{"version":3,"sources":["C:\\Users\\admin\\Desktop\\WYSIWYG\\归档\\src\\components\\graphNew.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t\n\t<svg id = 'graphSvg' \n\t:height = 'svgConfig.height' :width = 'svgConfig.width'\n\t@click = 'log()'>\n      <!-- <g id = 'matrix'\n      transform = 'translate(0,-20)'>\n        <g class = 'weight' v-for = '(d,i) in cluster'\n        :key = 'i'>\n          <rect\n          :x = 'i * (500/cluster.length) + 5+20 + svgConfig.width - 600'\n          y = 725\n          :height = 'lenScale(getWeight(d))'\n          :width = '500/cluster.length-15'\n          fill = '#54f2f3'\n          rx = 5\n          \n          >\n          </rect>\n          <text\n          :dx = 'i * (500/cluster.length) + 5 +(500/cluster.length-15)/2 +20 + svgConfig.width - 600'\n          :dy = '740 + lenScale(getWeight(d))'\n          fill = 'black'\n          text-anchor = 'middle'\n          font-weight = 'bold'\n          font-size = 12\n          \n          >\n            {{(getWeight(d)/maxWeight).toFixed(2)}}\n          </text>\n        </g>\n        <g class = 'row' v-for = '(d,i) in community'\n        :key = 'i'>\n          <rect v-for = '(k,j) in d'\n          :key = 'j'\n          :x = 'j * (500/d.length) + 20 + svgConfig.width - 600'\n          :y = 'i * (550/community.length) + 20 + 150'\n          :height = '550/community.length - 5'\n          :width = '500/d.length-5'\n          :fill = 'k == 1?getColor(i,j):\"lightgrey\"'\n          stroke = 'white'\n          :stroke-width = 'cluster[j].nodes[0].index == i? 10:0'\n          stroke-dasharray = '4'\n          \n          >\n          </rect>\n          <text\n          :dx = 'svgConfig.width - 600 + 10'\n          :dy = '(i+0.5) * (550/community.length) + 25 + 150 '\n          text-anchor = 'end'\n          fill = 'black'\n          >\n            {{dataNodes[i].type == 'attribute'?dataNodes[i].name:dataNodes[i].name.length>=8? dataNodes[i].name.substring(0,8) + '..':dataNodes[i].name}}\n          </text>\n        </g>\n        <text v-for = '(d,i) in cluster'\n        :key = 'i'\n        :dx = 'cluster.length<9?(i+0.5) * (500/cluster.length) + 20 + svgConfig.width - 600 :(i+0.5) * (500/cluster.length) + 17 + svgConfig.width - 600'\n        dy = 165\n        text-anchor = 'middle'\n        font-weight = 'bold'\n        :font-size = 'cluster.length<9? 24 : 15'\n        fill = 'black'\n        @mouseover = 'clusterHighlight(i)'\n        @mouseout = 'outerOut()'\n        >\n            {{i+1}}\n        </text>\n        <text \n        :dx = '120+svgConfig.width - 450'\n        dy = 135\n        font-size = 25\n        font-weight = 'bold'\n        fill = 'black'\n        text-anchor = 'middle'>\n          cluster\n        </text>\n        <text\n        :dx = '120+svgConfig.width - 450'\n        dy = 835\n        font-size = 25\n        font-weight = 'bold'\n        fill = 'black'\n        text-anchor = 'middle'>\n          weight\n        </text>\n      </g> -->\n      <g @click = 'innerLinkFlag = !innerLinkFlag'>\n        <rect id = 'btnIndexLink'\n        :x = 'svgConfig.width - 110'\n        :y = '20'\n        :fill = 'innerLinkFlag? \"#5aeaf1\":\"lightgrey\"'></rect>\n        <text\n        :dx = 'svgConfig.width - 65'\n        :dy = '45'\n        fill = 'black'\n        text-anchor = 'middle'>\n          inner link\n        </text>\n      </g>\n      \n      <g @click = 'outerLinkFlag = !outerLinkFlag'>\n        <rect id = 'btnIndexLink'\n        :x = 'svgConfig.width - 210'\n        :y = '20'\n        :fill = 'outerLinkFlag? \"#5aeaf1\":\"lightgrey\"'></rect>\n        <text\n        :dx = 'svgConfig.width - 165'\n        :dy = '45'\n        fill = 'black'\n        text-anchor = 'middle'>\n          outer link\n        </text>\n      </g>\n\n      <g @click = 'this.$store.commit(\"changeStoryBtn\"),\n        this.$store.commit({\n          type:`changeStoryText`,\n          text:storyTest\n        })'>\n        <rect id = 'btnIndexLink'\n        :x = 'svgConfig.width - 310'\n        :y = '20'\n        :fill = 'this.$store.state.story.btn? \"#5aeaf1\":\"lightgrey\"'></rect>\n        <text\n        :dx = 'svgConfig.width - 265'\n        :dy = '45'\n        fill = 'black'\n        text-anchor = 'middle'>\n          Show story\n        </text>\n      </g>\n      \n    <g id = 'graph'\n    :transform = '\"translate(\"+[-svgConfig.width* 0.2,0]+\")\"'>\n      <g id = 'outerLinks' v-show = 'outerLinkFlag'>\n        \n      </g>\n\n      <g id = 'outerCircle' v-if = 'actionList.length>4'>\n   \n        <path v-for = '(d,i) in arcData'\n        :key = 'i'\n        :d = 'arc(d,i)'\n        :fill = 'd.color'\n        fill-opacity = '0.8'\n        :transform = \"'translate('+[svgConfig.width/2,svgConfig.height/2]+')'\"> \n        </path>\n\n        <circle v-for = '(d,i) in actionNodes'\n        :key = 'i'\n        :cx = 'd.xy[0]'\n        :cy = 'd.xy[1]'\n        r = 10\n        :fill = 'color(d.data.view)'\n        stroke = 'white'\n        @mouseover = 'outerTip(d), outerHighlight(d)'\n        @mouseout = 'hover.flag = false, outerOut()'\n        @click = 'rebuildState(d.states)'>  \n        </circle>\n        \n      </g>\n\n      <g id = 'innerLinks' v-show = 'innerLinkFlag'>\n          \n        \n      </g>\n\n      <g id = 'innerGraph' >\n        \n      </g>\n      \n      \n    </g>\n    \n      <g id = 'tip' v-if = 'hover.flag && hover.type == \"outer\"'>\n        \n        <rect height = 180\n        :width = 'hover.data.data.desc0.length>20?(hover.data.data.desc0.length+4) *12 : 300'\n        fill = 'black'\n        fill-opacity = 0.7\n        :x = \"XY[0] +10 - svgConfig.width * 0.2\"\n        :y = \"XY[1] - 30\"\n        rx = 20>  \n        </rect>\n        \n        <text fill = 'red' font-size=\"24\" :dx = 'XY[0]+20 - this.svgConfig.width*0.2' :dy = 'XY[1] - 5'>{{hover.data.data.desc0}}</text>\n        <text fill = 'white' :dx = 'XY[0]+20 - this.svgConfig.width*0.2' :dy = 'XY[1] +15'>Interaction: {{hover.data.data.obj}}</text>\n        <text fill = 'white' :dx = 'XY[0]+20- this.svgConfig.width*0.2' :dy = 'XY[1] +35'>View: {{ hover.data.data.view.substring(hover.data.data.view.length-1,hover.data.data.view.length)}}</text>\n        <text fill = 'white' :dx = 'XY[0]+20- this.svgConfig.width*0.2' :dy = 'XY[1] +55'>Time stamp: {{hover.data.data.timeStamp.toFixed(2)}}</text>\n        <div>\n          <img v-bind:src='hover.data.data.pic'/>\n        </div>\n        >\n\n        <!-- <text :dx = 'XY[0]+20' :dy = 'XY[1] +55'>{{'data:'+hover.data.data}}</text>\n        <text :dx = 'XY[0]+20' :dy = 'XY[1] +75'>{{'type:' +(hover.data.lastTime?(\"hover for \"+hover.data.lastTime.toFixed(2) + \" seconds\"):\"click\")}}</text> -->\n      </g>\n      \n      <g id = 'tip' v-if = 'hover.flag && hover.type == \"inner\"'>\n        <rect height = 100\n        :width = 'hover.data.name.length>10?(hover.data.name.length+5) *15 +10:230'\n        fill = 'black'\n        fill-opacity = 0.7\n        :x = \"XY[0] +10\"\n        :y = \"XY[1] - 30\"\n        rx = 20>\n           \n        </rect>\n\n        <text fill = 'white' :dx = 'XY[0]+20' :dy = 'XY[1] - 5'>Name: {{hover.data.name}}</text>\n        <text fill = 'white' :dx = 'XY[0]+20' :dy = 'XY[1] +15'>Type: {{hover.data.type}}</text>\n        <text fill = 'white' :dx = 'XY[0]+20' :dy = 'XY[1] +35'>Count: {{hover.data.count}}</text>\n        <text fill = 'white' :dx = 'XY[0]+20' :dy = 'XY[1] +55'>Duration: {{hover.data.dura}}</text>\n        <!-- <text :dx = 'XY[0]+20' :dy = 'XY[1] +55'>{{'data:'+hover.data.data}}</text>\n        <text :dx = 'XY[0]+20' :dy = 'XY[1] +75'>{{'type:' +(hover.data.lastTime?(\"hover for \"+hover.data.lastTime.toFixed(2) + \" seconds\"):\"click\")}}</text> -->\n      </g>\n\t</svg>\n\t\n</template>\n\n<script>\n\timport * as d3 from \"d3\"\n  \n\texport default{\n\t\tname:'graphNew',\n    \n\t\tdata(){\n\t\t\treturn{\n\t\t\t\tcolor:d3.scale.category10(),\n\t\t\t\tsvgConfig:{\n\t\t\t\t\theight:this.$store.state.height * 0.95,\n\t\t\t\t\twidth:this.$store.state.width * 0.95,\n\t\t\t\t\tbackgroundColor:\"black\",\n\t\t\t\t\topacity:0.8,\n\t\t\t\t},\n        innerLinkFlag:true,\n        outerLinkFlag:true,\n        hover:{\n          flag:false,\n          data:{},\n          type:'inner'\n        },\n        // statesSelected:{\n        //   selected:'',\n        //   leaf:''\n        // },\n        XY:[],\n        storyBtn :false\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t},\n\t\tmounted(){\n      \n\t\t},\n\t\tcomputed:{\n      nCluster(){\n        let sol = []\n        for(let i = 0;i<this.cluster.length;i++){\n          let t = this.cluster[i]\n          let tmp = {}\n          tmp['nodes'] = t.nodes\n          tmp['count'] = t.count\n          tmp['time'] = t.time\n          if(this.diction[i]>=0){\n            tmp['desc'] = this.diction[i]\n          }\n          else{\n            tmp['desc'] = null\n          }\n          sol.push(tmp)\n        }\n        return sol\n      },\n\n      diction(){\n        let sol = {}\n        for(let i = 0;i<this.cluster.length;i++){\n          let t = this.cluster[i].nodes\n          if(t.length<5){\n            let tmp = []\n            \n            for(let j of t){\n              tmp.push(j.name)\n            }\n            //console.log(tmp)\n            for(let j = 0;j<this.actToData.length;j++){\n              let res = true\n              //console.log(tmp,this.actToData[j])\n              for(let k of this.actToData[j]){\n                \n                if( tmp.indexOf(k)  === -1){\n                  res = false\n                }\n              }\n              \n              if(res == true){\n                sol[i] = j\n                break\n              }\n            }\n\n          }\n        }\n        return sol\n      },\n\n      actToData(){\n        let sol = []\n        //console.log(this.actionNodes)\n        for(let i = 0;i<this.actionNodes.length;i++){\n          let t = this.actionNodes[i].data.data\n          let tmp = []\n          \n          if(t.attribute){\n            tmp.push(t.attribute)\n          }\n          if(t.industry){\n            tmp.push(t.industry)\n          }\n          for(let j of t.company){\n            tmp.push(j)\n          }\n          for(let j of t.province){\n            tmp.push(j)\n          }\n          sol.push(tmp)\n        }\n        return sol\n      },\n\n      imgStory(){\n        let sol = []\n        for(let i = 0;i<this.actionNodes.length;i++){\n          sol.push(this.actionNodes[i].data.desc)\n        }\n        return sol\n      },\n\n      storyTest(){\n        let story = []\n        for(let i = 0;i<this.newCluster.length;i++){\n          if(i === 0){\n            let tmp = {}\n            let a1 = this.getStory(this.newCluster[i].parent)\n            let first\n            if(a1.length == 1){\n            first = \"The user is most concerned about \" + a1[0] + '.'\n            }\n            else if(a1.length == 2){\n            first = \"The user is most concerned about \" + a1[0] + ' and ' + a1[1] +  '.'\n            }\n            tmp['main'] = first\n            tmp['sub'] = []\n            for(let j = 0;j<this.newCluster[i].son.length;j++){\n              let t = this.newCluster[i].son[j]\n              if(t.desc>=0){\n                tmp['sub'].push({id:t.desc,desc:this.imgStory[t.desc]})\n              }\n              \n            }\n            story.push(tmp)\n          }\n          else if(i >= 1){\n            let tmp = {}\n            let a1 = this.getStory(this.newCluster[i].parent)\n            let first\n            if(a1.length == 1){\n            first = \"The user is also concerned about \" + a1[0] + '.'\n            }\n            else if(a1.length == 2){\n            first = \"The user is also concerned about \" + a1[0] + ' and ' + a1[1] +  '.'\n            }\n            tmp['main'] = first\n            tmp['sub'] = []\n            for(let j = 0;j<this.newCluster[i].son.length;j++){\n              let t = this.newCluster[i].son[j]\n              if(t.desc>=0){\n                tmp['sub'].push({id:t.desc,desc:this.imgStory[t.desc]})\n              }\n              \n            }\n            story.push(tmp)\n          }\n        }\n        return story\n      },\n\n      storyPieces(){\n        let sol = []\n        for(let i = 0;i<this.cluster.length;i++){\n          sol.push(this.getStory(this.cluster[i]))\n        }\n        return sol\n      },\n      newCluster(){\n        let sol = []\n        let tmp2 = []\n        for(let i = 0;i<this.nCluster.length-1;i++){\n          let tmp = []\n          for(let j = i+1;j<this.nCluster.length;j++){\n            if(this.judgeSub(this.nCluster[i],this.nCluster[j])){\n              tmp.push(this.nCluster[j])\n              tmp2.push(j)\n            }\n          }\n          if(tmp2.indexOf(i) == -1){\n            sol.push({parent:this.nCluster[i],son:tmp})\n          }\n        }\n        return sol\n      },\n\n      lenScale(){\n        return d3.scale.linear().domain([0,this.maxWeight]).range([5,75])\n      },\n\n      maxWeight(){\n        \n        let maxi = 0\n        for(let i = 0;i<this.cluster.length;i++){\n          let weight = this.getWeight(this.cluster[i])\n          if(weight > maxi){\n            maxi = weight\n          }\n        }\n        return maxi\n      },\n\n      linkDistance(){\n        if (this.dataNodes.length < 10){\n          return 200\n        }\n        else if(this.dataNodes.length < 20){\n          return 150\n        }\n        else if(this.dataNodes.length< 30){\n          return 100\n        }\n        else{\n          return 50\n        }\n      },\n\n      community(){\n        let sol  = []\n        for(let i = 0;i<this.dataNodes.length;i++){\n          let tmp = []\n          for(let j = 0;j<this.cluster.length;j++){\n            tmp.push(0)\n          }\n          sol.push(tmp)\n        }\n        for(let i = 0;i<this.cluster.length;i++){\n          for(let j = 0;j<this.cluster[i].nodes.length;j++){\n            let row = this.cluster[i].nodes[j].index\n            let col = i\n            sol[row][col] = 1\n          }\n        }\n        return sol\n      },\n\n      cluster(){\n        let sol = []\n        let ref = []\n        \n        for(let i = 0;i<this.dataNodes.length;i++){\n          let provFlag = false\n          let compFlag = false\n          if(this.dataNodes[i].type != 'attribute'){\n          //if(this.dataNodes[i].name != 'patent_num' && this.dataNodes[i].name != 'proportion' && this.dataNodes[i].name != 'comparison'){\n            let tmp = [this.dataNodes[i]]\n            let sumTime = this.dataNodes[i].dura\n            let sumCount = this.dataNodes[i].count\n            let tmp2 = [i]\n            for(let j = 0;j<this.dataLinks.length;j++){\n              if(this.dataLinks[j].i == i){\n                if(this.dataNodes[this.dataLinks[j].j].type == 'company'){\n                  compFlag = true\n                }\n                if(this.dataNodes[this.dataLinks[j].j].type == 'province'){\n                  provFlag = true\n                }\n                tmp.push(this.dataNodes[this.dataLinks[j].j])\n                tmp2.push(this.dataLinks[j].j)\n                sumTime+=this.dataNodes[this.dataLinks[j].j].dura\n                sumCount+=this.dataNodes[this.dataLinks[j].j].count\n              }\n              if(this.dataLinks[j].j == i){\n                if(this.dataNodes[this.dataLinks[j].i].type == 'company'){\n                  compFlag = true\n                }\n                if(this.dataNodes[this.dataLinks[j].i].type == 'province'){\n                  provFlag = true\n                }\n                tmp.push(this.dataNodes[this.dataLinks[j].i])\n                tmp2.push(this.dataLinks[j].i)\n                sumTime+=this.dataNodes[this.dataLinks[j].i].dura\n                sumCount+=this.dataNodes[this.dataLinks[j].j].count\n              }\n              \n            }\n            tmp2.sort()\n            let st = tmp2.join('+')\n            if(ref.indexOf(st) == -1 && !(compFlag && provFlag)){\n              ref.push(st)\n              sol.push({nodes:tmp,count:sumCount,time:sumTime})\n            }\n            \n          }\n          \n          \n        }\n        sol.sort((a,b)=>{\n          return this.getWeight(b) - this.getWeight(a)\n        })\n        return sol\n      },\n\n      adjMatrix(){\n        let sol = []\n        let n = this.dataNodes.length\n        var getWeight = (i,j,links)=>{\n          if(i == j){\n            return 0\n          }\n          for(let k = 0;k<links.length;k++){\n            if((links[k].i == i && links[k].j == j)||\n            (links[k].i == j && links[k].j == i)){\n              return links[k].weight\n            }\n          }\n          return 0\n        }\n        for(let i = 0;i<n;i++){\n          let vector = []\n          for(let j = 0;j<n;j++){\n            vector.push(getWeight(i,j,this.dataLinks))\n          }\n          sol.push(vector)\n        }\n        return sol\n        \n      },\n      arc(){\n        return d3.svg.arc().outerRadius(this.svgConfig.height/2-18) \n                        .innerRadius(this.svgConfig.height/2-22);\n      },\n\n      // 外圈弧长的数据\n      arcData(){\n        let endR = Math.PI * 2  * 350/360\n        let endT = this.actionList[this.actionList.length-1].timeStamp\n        let sol = []\n        for(let i = 0;i<this.actionList.length-1;i++){\n          \n          sol.push({\n            startAngle:this.actionList[i].timeStamp/endT * endR,\n            endAngle:this.actionList[i+1].timeStamp/endT *endR,\n            color:this.color(this.actionList[i].view)\n          })\n        }\n        return sol\n        /* var data = [ \n            {startAngle: 0, endAngle: 0.1 * endAngle},\n            {startAngle: 0.1 * endAngle, endAngle: 0.2 * endAngle},\n            {startAngle: 0.2 * endAngle, endAngle: 0.4 * endAngle},\n            {startAngle: 0.4 * endAngle, endAngle: 0.6 * endAngle},        \n            {startAngle: 0.6 * endAngle, endAngle: 0.7 * endAngle},        \n            {startAngle: 0.7 * endAngle, endAngle: 0.9 * endAngle},        \n            {startAngle: 0.9 * endAngle, endAngle: endAngle}\n        ]; */\n      },\n      force(){\n          return d3.layout.force()\n            .size([this.svgConfig.width,this.svgConfig.height])\n            .on(\"tick\",this.tick)\n            .gravity(0.1)\n            .charge(-1000)\n            .friction(0.85)\n      },\n\t\t\tactionList(){\n\t\t\t\treturn this.$store.state.user.actionList\n\t\t\t},\n      visualStates(){\n        return this.$store.state.visualStates\n      },\n      visualList(){\n        return this.$store.state.visualList\n      },\n      screenShot(){\n        return this.$store.state.screenShot\n      },\n      selected(){\n        return this.$store.state.selected\n      },\n\n\n      // 外圈的动作节点\n      actionNodes(){\n        if(this.actionList.length<2){\n          return []\n        }\n        else{\n          let center = [this.svgConfig.width/2,this.svgConfig.height/2]\n          let endT = this.actionList[this.actionList.length-1].timeStamp\n          let endR = Math.PI * 2  * 350/360\n          let R = this.svgConfig.height/2 - 20\n          var getPos = (data,outerRadius,endTime,endRadius)=>{\n            let alpha = (data.timeStamp )/(endTime) * endRadius\n            return [center[0] + outerRadius * Math.sin(alpha),\n            center[1] - outerRadius * Math.cos(alpha)]\n          }\n          let sol = []\n          for(let i = 0;i<this.actionList.length;i++){\n            sol.push({xy:getPos(this.actionList[i],R,endT,endR), data:this.actionList[i], states:this.visualList[i+1]})\n          }\n          return sol\n        }\n        \n        \n      },\n      dataNodes(){\n        let sol = []\n        if(this.actionList.length<2){\n          return sol\n        }\n        else{\n          let lst = []\n          for(let i = 0;i<this.actionList.length;i++){\n            if(this.actionList[i].data.industry!=''){\n                \n                lst.push({name:this.actionList[i].data.industry,type:'industry',\n                time:i < this.actionList.length-1?this.actionList[i+1].timeStamp - this.actionList[i].timeStamp:10})\n\n            }\n            if(this.actionList[i].data.company.length>0){\n              for(let j = 0;j<this.actionList[i].data.company.length;j++){\n                lst.push({name:this.actionList[i].data.company[j],type:'company',\n                time:i < this.actionList.length-1?this.actionList[i+1].timeStamp - this.actionList[i].timeStamp:10})\n              }\n            }\n            if(this.actionList[i].data.province.length>0){\n              for(let j = 0;j<this.actionList[i].data.province.length;j++){\n                lst.push({name:this.actionList[i].data.province[j],type:'province',\n                time:i < this.actionList.length-1?this.actionList[i+1].timeStamp - this.actionList[i].timeStamp:10})\n              }\n            }\n            if(this.actionList[i].data.attribute!=''){\n              lst.push({name:this.actionList[i].data.attribute,type:'attribute',\n              time:i < this.actionList.length-1?this.actionList[i+1].timeStamp - this.actionList[i].timeStamp:10})\n            }\n          }\n          // console.log(lst)\n          let tmp = []\n          var count = (str,arr)=>{\n            let c = 0\n            for(let i = 0;i<arr.length;i++){\n              if(arr[i].name == str){\n                c++\n              }\n            }\n            return c\n          }\n          \n          var dura = (str,arr)=>{\n            let c = 0\n            for(let i = 0;i<arr.length;i++){\n              if(arr[i].name == str){\n                c += arr[i].time\n              }\n            }\n            return parseFloat(c.toFixed(2))\n          }\n          \n          let ind = 0\n          for(let i = 0;i<lst.length;i++){\n            if(tmp.indexOf(lst[i].name) == -1){\n              tmp.push(lst[i].name)\n              sol.push({index:ind,name:lst[i].name,type:lst[i].type,count:count(lst[i].name,lst),dura:dura(lst[i].name,lst)})\n              ind++\n            }\n          }\n          return sol\n        }\n      },\n      dataNodes2(){\n        return this.dataNodes.length\n      },\n      dataLinks(){\n        let sol = []\n        if(this.actionList.length<2){\n          return []\n        }\n        else{\n          var judgeIn = (key1,key2,lst)=>{\n            for(let i = 0;i<lst.length;i++){\n              if((lst[i].source.name == key1 && lst[i].target.name == key2)\n              ||(lst[i].source.name == key2 && lst[i].target.name == key1)){\n                return i\n              }\n            }\n            return 'notIn'\n          }\n          var getIndex = (key,lst)=>{\n            for(let i = 0;i<lst.length;i++){\n              if(lst[i].name == key){\n                return i\n              }\n            }\n          }\n          for(let i = 0;i<this.actionNodes.length;i++){\n            let tmp = []\n            if(this.actionList[i].data.industry!=''){\n              tmp.push(this.actionList[i].data.industry)\n            }\n            if(this.actionList[i].data.company.length>0){\n              for(let j = 0;j<this.actionList[i].data.company.length;j++){\n                tmp.push(this.actionList[i].data.company[j])\n              }\n            }\n            if(this.actionList[i].data.province.length>0){\n              for(let j = 0;j<this.actionList[i].data.province.length;j++){\n                tmp.push(this.actionList[i].data.province[j])\n              }\n            }\n            if(this.actionList[i].data.attribute!=''){\n              tmp.push(this.actionList[i].data.attribute)\n            }\n            \n            for(let j = 0;j<tmp.length-1;j++){\n              for(let k = j+1;k<tmp.length;k++){\n                if(judgeIn(tmp[j],tmp[k],sol) == 'notIn' && tmp[j]!=tmp[k]){\n                  sol.push({source:this.dataNodes[getIndex(tmp[j],this.dataNodes)],\n                  target:this.dataNodes[getIndex(tmp[k],this.dataNodes)],\n                  weight:1,\n                  i:getIndex(tmp[j],this.dataNodes),\n                  j:getIndex(tmp[k],this.dataNodes)})\n                }\n                else{\n                  sol[judgeIn(tmp[j],tmp[k],sol)].weight++\n                }\n              }\n            }\n          }\n        }\n        return sol\n      },\n      interactionLinks(){\n        let sol = []\n        if(this.actionList.length<2){\n          return []\n        }\n        else{\n          var getIndex = (key,lst)=>{\n            for(let i = 0;i<lst.length;i++){\n              if(lst[i].name == key){\n                return i\n              }\n            }\n          }\n          for(let i = 0;i<this.actionNodes.length;i++){\n            let tmp = []\n            if(this.actionList[i].data.industry!=''){\n              tmp.push(this.actionList[i].data.industry)\n            }\n            if(this.actionList[i].data.company.length>0){\n              for(let j = 0;j<this.actionList[i].data.company.length;j++){\n                tmp.push(this.actionList[i].data.company[j])\n              }\n            }\n            if(this.actionList[i].data.province.length>0){\n              for(let j = 0;j<this.actionList[i].data.province.length;j++){\n                tmp.push(this.actionList[i].data.province[j])\n              }\n            }\n            if(this.actionList[i].data.attribute!=''){\n              tmp.push(this.actionList[i].data.attribute)\n            }\n            for(let j = 0;j<tmp.length;j++){\n              sol.push({\n                source:this.actionNodes[i],\n                target:this.dataNodes[getIndex(tmp[j],this.dataNodes)]\n              })\n            }\n            \n            \n          }\n          return sol\n        }\n      },\n\t\t\t\n\t\t},\n\t\tmethods:{\n      rebuildState(node){\n        this.$store.commit('showGraph')\n        // this.$store.commit()\n        this.$store.commit({\n          type: 'rebuildStates',\n          Aselected: node.Aselected,\n          Aleaf: node.Aleaf,\n\t\t\t\t\tBflare0 :node.Bflare0,\n\t\t\t\t\tBflare1 :node.Bflare1,\n\t\t\t\t\tBflareSum :node.BflareSum,\n\t\t\t\t\tBflareSum2 :node.BflareSum2,\n\t\t\t\t\tBflareSum3 :node.BflareSum3,\n          BtreeTypeFlag: node.BtreeTypeFlag,\n          Bsplited: node.Bsplited,\n          Bdepth: node.Bdepth,\n          BrootName: node.BrootName,\n          BtreeData: node.BtreeData,\n          Dtitle: node.Dtitle\n        })\n        // this.\n      },\n      getStory(cluster){\n        //let company = []\n        //let province = []\n        let entity = []\n        let attribute = []\n        let industry = []\n        let comparison = []\n        \n        for(let i = 0;i<cluster.nodes.length;i++){\n          if(cluster.nodes[i].type == 'company'){\n            entity.push(cluster.nodes[i].name)\n          }\n          else if(cluster.nodes[i].type == 'province'){\n            entity.push(cluster.nodes[i].name)\n          }\n          else if(cluster.nodes[i].type == 'attribute'){\n            if(cluster.nodes[i].name == 'proportion'){\n              attribute.push('patent proportion')\n            }\n            else if(cluster.nodes[i].name == 'patent_num'){\n              attribute.push('patent number')\n            }\n            else{\n              comparison.push(cluster.nodes[i].name)\n            }\n            \n          }\n          else if(cluster.nodes[i].type == 'industry'){\n            industry.push(cluster.nodes[i].name)\n          }\n        }\n        \n        let wordEntity = ''\n        let wordIndustry = ''\n        let wordAttribute = ''\n        let wordComparison = ''\n        \n        if(attribute.length>0){\n          if(attribute.length==1){\n            wordAttribute = attribute[0]\n          }\n          else if(attribute.length == 2){\n            wordAttribute = attribute[0] + ' and ' + attribute[1]\n          }\n          else{\n            wordAttribute = attribute.join(', ')\n          }\n        }\n        \n        if(comparison.length>0){\n          if(comparison.length==1){\n            wordComparison = comparison[0]\n          }\n          else if(comparison.length == 2){\n            wordComparison = comparison[0] + ' and ' + comparison[1]\n          }\n          else{\n            wordComparison = comparison.join(', ')\n          }\n        }\n        if(entity.length>0){\n          if(entity.length==1){\n            wordEntity = entity[0]\n          }\n          else if(entity.length == 2){\n            wordEntity = entity[0] + ' and ' + entity[1]\n          }\n          else{\n            wordEntity = entity.join(', ')\n          }\n        }\n        \n        if(industry.length>0){\n          if(industry.length==1){\n            wordIndustry = industry[0]\n          }\n          else if(industry.length == 2){\n            wordIndustry = industry[0] + ' and ' + industry[1]\n          }\n          else{\n            wordIndustry = industry.join(', ')\n          }\n        }\n        let piece = []\n        if(wordComparison){\n          let text = wordComparison === \"similarity\" || wordComparison === \"complement\"? 'the ' + wordComparison + ' between ' + wordEntity : 'the ' + wordComparison + ' between ' + wordEntity + ' in ' + wordIndustry \n          piece.push(text)\n        }\n        if(wordAttribute){\n          let text = 'the ' + wordAttribute + ' of ' + wordEntity + ' in ' + wordIndustry \n          piece.push(text)\n        }\n        return piece\n        \n      },\n      judgeSub(parent,son){\n        //console.log('123123123',parent,son)\n        for(let i = 0;i< son.nodes.length;i++){\n          //console.log('12312331',i)\n          if(parent.nodes.indexOf(son.nodes[i]) == -1){\n            return false\n          }\n        }\n        return true\n      },\n      getColor(i,j){\n        let maxi = this.getWeight(this.cluster[j])\n        let maxi2 = 0\n        for(let k = 0;k<this.cluster[j].nodes.length;k++){\n          let tmp = this.cluster[j].nodes[k].count * 5 + this.cluster[j].nodes[k].dura\n          if(tmp > maxi2){\n            maxi2 = tmp\n          }\n        }\n        let scale = d3.scale.linear().domain([0,maxi2/maxi]).range(['#f8de85',\"#da0000\"])\n        return scale((this.dataNodes[i].count * 5 + this.dataNodes[i].dura)/maxi)\n      },\n      getWeight(clu){\n        return clu.count * 5 + clu.time\n      },\n      clusterHighlight(ind){\n        let indexList = []\n        for(let i = 0;i<this.community.length;i++){\n          if(this.community[i][ind] == 1){\n            indexList.push(i)\n          }\n        }\n        \n        d3.select(\"#innerGraph\").selectAll(\"circle\")\n        .filter(d=>indexList.indexOf(d.index)==-1)\n        .style(\"fill-opacity\",0.3)\n        .style(\"stroke-opacity\",0.3)\n        \n        d3.select(\"#innerGraph\").selectAll(\"circle\")\n        .filter(d=>indexList.indexOf(d.index)!=-1)\n        .style(\"fill-opacity\",1)\n        .style(\"stroke-opacity\",1)\n        \n        d3.select(\"#innerLinks\").selectAll(\"line\")\n        .filter(k=>indexList.indexOf(k.source.index)!=-1 && indexList.indexOf(k.target.index)!=-1)\n        .style(\"stroke-opacity\",1)\n        \n        d3.select(\"#innerLinks\").selectAll(\"line\")\n        .filter(k=>indexList.indexOf(k.source.index)==-1 || indexList.indexOf(k.target.index)==-1)\n        .style(\"stroke-opacity\",0)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .filter(k=>indexList.indexOf(k.target.index) != -1)\n        .style(\"stroke-opacity\",1)\n        .style(\"stroke-width\",2)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .filter(k=>indexList.indexOf(k.target.index) == -1)\n        .style(\"stroke-opacity\",0)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .filter(k=>indexList.indexOf(k.target.index) != -1)\n        .style(\"fill-opacity\",1)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .filter(k=>indexList.indexOf(k.target.index) == -1)\n        .style(\"fill-opacity\",0)\n        \n      },\n\n      outerTip(d){\n        \n        this.XY = [d.xy[0],d.xy[1]>this.svgConfig.height/2? d.xy[1]-30  : d.xy[1]+30]\n        this.hover.flag = true\n        this.hover.type = 'outer'\n        this.hover.data = d\n        // console.log(\"hover.data.data.pic\", this.hover.data.data.pic)\n      },\n\n      innerHighlight(d){\n        let tmp = [d.name]\n        \n        for(let i = 0;i<this.dataLinks.length;i++){\n          if(d.name == this.dataLinks[i].target.name){\n            tmp.push(this.dataLinks[i].source.name)\n          }\n          else if(d.name == this.dataLinks[i].source.name){\n            tmp.push(this.dataLinks[i].target.name)\n          }\n        }\n        \n        d3.select(\"#innerGraph\").selectAll(\"circle\")\n        .filter(d=>tmp.indexOf(d.name)==-1)\n        .style(\"fill-opacity\",0.3)\n        .style(\"stroke-opacity\",0.3)\n        \n        d3.select(\"#innerGraph\").selectAll(\"circle\")\n        .filter(d=>tmp.indexOf(d.name)!=-1)\n        .style(\"fill-opacity\",1)\n        .style(\"stroke-opacity\",1)\n        \n        d3.select(\"#innerLinks\").selectAll(\"line\")\n        .filter(k=>tmp.indexOf(k.source.name)!=-1 && tmp.indexOf(k.target.name)!=-1)\n        .style(\"stroke-opacity\",1)\n        \n        d3.select(\"#innerLinks\").selectAll(\"line\")\n        .filter(k=>tmp.indexOf(k.source.name)==-1 || tmp.indexOf(k.target.name)==-1)\n        .style(\"stroke-opacity\",0)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .filter(k=>k.target.name == d.name)\n        .style(\"stroke-opacity\",1)\n        .style(\"stroke-width\",2)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .filter(k=>k.target.name != d.name)\n        .style(\"stroke-opacity\",0)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .filter(k=>k.target.name == d.name)\n        .style(\"fill-opacity\",1)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .filter(k=>k.target.name != d.name)\n        .style(\"fill-opacity\",0)\n        \n        \n      },\n      outerHighlight(d){\n        let tmp = []\n        if(d.data.data.industry!=''){\n          tmp.push(d.data.data.industry)\n        }\n        if(d.data.data.company.length>0){\n          for(let j = 0;j<d.data.data.company.length;j++){\n            tmp.push(d.data.data.company[j])\n          }\n        }\n        if(d.data.data.province.length>0){\n          for(let j = 0;j<d.data.data.province.length;j++){\n            tmp.push(d.data.data.province[j])\n          }\n        }\n        if(d.data.data.attribute!=''){\n          tmp.push(d.data.data.attribute)\n        }\n        \n        d3.select(\"#innerGraph\").selectAll(\"circle\")\n        .filter(d=>tmp.indexOf(d.name)==-1)\n        .style(\"fill-opacity\",0.3)\n        .style(\"stroke-opacity\",0.3)\n        \n        d3.select(\"#innerGraph\").selectAll(\"circle\")\n        .filter(d=>tmp.indexOf(d.name)!=-1)\n        .style(\"fill-opacity\",1)\n        .style(\"stroke-opacity\",1)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .filter(k=>k.source.data.timeStamp == d.data.timeStamp)\n        .style(\"stroke-opacity\",1)\n        .style(\"stroke-width\",2)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .filter(k=>k.source.data.timeStamp != d.data.timeStamp)\n        .style(\"stroke-opacity\",0)\n       \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .filter(k=>k.source.data.timeStamp == d.data.timeStamp)\n        .style(\"fill-opacity\",1)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .filter(k=>k.source.data.timeStamp != d.data.timeStamp)\n        .style(\"fill-opacity\",0)\n        \n        d3.select(\"#innerLinks\").selectAll(\"line\")\n        .filter(k=>tmp.indexOf(k.source.name)!=-1 && tmp.indexOf(k.target.name)!=-1)\n        .style(\"stroke-opacity\",1)\n        \n        d3.select(\"#innerLinks\").selectAll(\"line\")\n        .filter(k=>tmp.indexOf(k.source.name)==-1 || tmp.indexOf(k.target.name)==-1)\n        .style(\"stroke-opacity\",0)\n        \n        \n        \n      },\n      outerOut(){\n        d3.select(\"#innerGraph\").selectAll(\"circle\")\n        .style(\"fill-opacity\",1)\n        .style(\"stroke-opacity\",1)\n        \n        d3.select(\"#innerLinks\").selectAll(\"line\")\n        .style(\"stroke-opacity\",1)\n        .style(\"stroke-width\",2)\n        \n        d3.select(\"#outerLinks\").selectAll(\"line\")\n        .style(\"stroke-opacity\",1)\n        .style(\"stroke-width\",0.5)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        //.filter(k=>k.source.data.timeStamp == d.data.timeStamp)\n        .style(\"fill-opacity\",1)\n        \n      },\n\t\t\tgetAngle(point1,point2){\n\t\t\t\tlet sin = this.tri(point1,point2,\"sin\")\n\t\t\t\treturn Math.asin(sin)\n\t\t\t},\n\t\t\tgetPoint(point1,point2){\n\t\t\t\t\n\t\t\t\tlet r = 15,\n\t\t\t\tangle = Math.PI/9\n\t\t\t\tlet theta = this.getAngle(point1,point2)\n\t\t\t\t\n\t\t\t\tif(point1.xy[0]<point2.x){\n\t\t\t\t\ttheta = Math.PI-theta\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet theta1 = theta - angle,\n\t\t\t\ttheta2 = theta + angle,\n\t\t\t\tsin1 = Math.sin(theta1),\n\t\t\t\tsin2 = Math.sin(theta2),\n\t\t\t\tcos1 = Math.cos(theta1),\n\t\t\t\tcos2 = Math.cos(theta2)\n\t\t\t\t\n\t\t\t\tlet x  = this.getNewPos(point2,point1,-(10 + point2.count * 3) - 10)[0],\n\t\t\t\ty = this.getNewPos(point2,point1,-(10 + point2.count * 3)-10)[1]\n\t\t\t\tlet p1 = [x  + r * cos1,y + r * sin1],\n\t\t\t\tp2 = [x + r * cos2,y + r * sin2],\n\t\t\t\tp3 = [x,y]\n\t\t\t\treturn [p1,p2,p3]\n\t\t\t\t\n\t\t\t},\n\t\t\tlog(){\n\t\t\t\t// console.log('actNode',this.actionNodes)\n        // console.log('dataNode',this.dataNodes)\n        // console.log('dataLink',this.dataLinks)\n        // console.log('interLink',this.interactionLinks)\n        // console.log('arc',this.arcData)\n        // console.log('adjcent',this.adjMatrix)\n        // console.log('cluster',this.cluster)\n        // console.log('matrix',this.community)\n        // console.log('maxWeight',this.maxWeight)\n        // console.log('newCluster',this.newCluster)\n        // console.log('storyPieces',this.storyPieces)\n        // console.log('storyTest',this.storyTest)\n        // console.log('imgStory',this.imgStory)\n        // console.log('act2Data',this.actToData)\n        // console.log('dictionary',this.diction)\n        console.log('selected',this.selected)\n        console.log('actionList', this.actionList)\n        console.log('visualStates', this.visualStates)\n        console.log('visualList', this.visualList)\n        // console.log('screenShot',this.screenShot)\n        //this.createNodes()\n\t\t\t},\n\t\t\ttick(){\n\t\t\t\td3.select(\"#innerGraph\")\n\t\t\t\t.selectAll('circle')\n\t\t\t\t.attr(\"cx\",d=>d.x)\n\t\t\t\t.attr(\"cy\",d=>d.y)\n        \n        d3.select(\"#innerLinks\").selectAll(\"line\")\n        .attr(\"x1\",d=>d.source.x)\n        .attr(\"x2\",d=>d.target.x)\n        .attr(\"y1\",d=>d.source.y)\n        .attr(\"y2\",d=>d.target.y)\n        \n        d3.select(\"#outerLinks\").selectAll(\"line\")\n        .attr(\"x1\",d=>d.source.xy[0])\n        .attr(\"x2\",d=>this.getNewPos(d.target,d.source,-(10 + d.target.count * 3) - 10)[0])\n        .attr(\"y1\",d=>d.source.xy[1])\n        .attr(\"y2\",d=>this.getNewPos(d.target,d.source,-(10 + d.target.count * 3) - 10)[1])\n        \n        d3.select(\"#outerLinks\").selectAll(\"polygon\")\n        .attr(\"points\",d=>this.getPoint(d.source,d.target))\n\t\t\t},\n\t\t\ttri(point1,point2,type){\n       \n\t\t\t\tlet x1 = point1.xy[0],\n\t\t\t\tx2 = point2.x,\n\t\t\t\ty1 = point1.xy[1],\n\t\t\t\ty2 = point2.y,\n\t\t\t\ta = y1-y2,\n\t\t\t\tb = x1-x2,\n\t\t\t\tc =Math.sqrt( a*a + b*b)\n\t\t\t\tif(type == 'sin'){\n\t\t\t\t\treturn a/c\n\t\t\t\t}\n\t\t\t\telse if (type == 'cos'){\n\t\t\t\t\treturn b/c\n\t\t\t\t}\n\t\t\t\telse if(type == 'tan'){\n\t\t\t\t\treturn b==0? 0:a/b\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetNewPos(point1,point2,r){\n\t\t\t\t\n        \n\t\t\t\treturn [point1.x - r * this.tri(point2,point1,\"cos\"),point1.y - r * this.tri(point2,point1,\"sin\")]\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t},\n      createNodes(){\n        \n        this.force\n        .linkStrength(0.8)\n        .linkDistance(100)\n        .nodes(this.dataNodes)\n        .links(this.dataLinks)\n        .start();\n        \n        d3.select(\"#innerGraph\")\n        .selectAll(\"circle\")\n        .data(this.dataNodes)\n        .enter()\n        .append(\"circle\")\n        .call(this.force.drag)\n        \n        d3.select(\"#innerGraph\")\n        .selectAll(\"circle\")\n        .data(this.dataNodes)\n        .attr(\"class\",\"dots\")\n        .attr(\"r\",20)\n        .style(\"fill\",d=> this.color(d.type))\n        .style(\"stroke\",'white')\n        \n        \n        d3.select(\"#innerLinks\")\n        .selectAll(\"line\")\n        .data(this.dataLinks)\n        .enter()\n        .append(\"line\")\n        \n        d3.select(\"#innerLinks\")\n        .selectAll(\"line\")\n        .data(this.dataLinks)\n        .attr(\"stroke\",'red')\n        .attr('stroke-width',2)\n      }\n\t\t\t\n\t\t},\n\t\twatch:{\n\t\t\tdataNodes(){\n        this.force\n        .linkStrength(0.8)\n        .linkDistance(this.linkDistance)\n        .nodes(this.dataNodes)\n        .links(this.dataLinks)\n        .start();\n        \n        d3.select(\"#innerGraph\")\n        .selectAll(\"circle\")\n        .data(this.dataNodes)\n        .enter()\n        .append(\"circle\")\n        .call(this.force.drag)\n        \n        d3.select(\"#innerGraph\")\n        .selectAll(\"circle\")\n        .data(this.dataNodes)\n        .attr(\"r\",d=>10 + d.count * 3)\n        .style(\"fill\",d=> this.color(d.type))\n        .style(\"stroke\",'white')\n          .on(\"mouseover\",d=>{\n              this.hover.type = 'inner'\n              this.hover.flag = true\n              this.hover.data = d\n              //console.log(d)\n              this.innerHighlight(d)\n            \n          })\n          .on(\"mousemove\",()=>{\n            let wid = this.hover.data.name.length>10?(this.hover.data.name.length+5) * 10 +10:230\n            this.XY = [event.offsetX>this.svgConfig.width - wid -20? event.offsetX - wid -20: event.offsetX,event.offsetY]\n          })\n          .on(\"mouseout\",()=>{\n            \n              this.hover.flag = false;\n              this.hover.data = {}\n              this.outerOut()\n          });\n        \n        d3.select(\"#innerGraph\")\n        .selectAll(\"circle\")\n        .data(this.dataNodes)\n        .exit()\n        .remove()\n        \n        d3.select(\"#innerLinks\")\n        .selectAll(\"line\")\n        .data(this.dataLinks)\n        .enter()\n        .append(\"line\")\n        \n        d3.select(\"#innerLinks\")\n        .selectAll(\"line\")\n        .data(this.dataLinks)\n        .attr(\"stroke\",'red')\n        .attr('stroke-width',2)\n        \n        d3.select(\"#innerLinks\")\n        .selectAll(\"line\")\n        .data(this.dataLinks)\n        .exit()\n        .remove()\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .data(this.interactionLinks)\n        .enter()\n        .append(\"line\")\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .data(this.interactionLinks)\n        .attr(\"stroke\",'grey')\n        .attr('stroke-width',0.5)\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"line\")\n        .data(this.interactionLinks)\n        .exit()\n        .remove()\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .data(this.interactionLinks)\n        .enter()\n        .append(\"polygon\")\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .data(this.interactionLinks)\n        .attr('fill','grey')\n        \n        d3.select(\"#outerLinks\")\n        .selectAll(\"polygon\")\n        .data(this.interactionLinks)\n        .exit()\n        .remove()\n        /* <polygon v-if = 'getNewPos(d.source,d.target,15)[0]'\n        :points = 'getPoint(d.source,d.target)'\n        :fill = 'linksColor(d)'\n        :fill-opacity = 'linksOpacity(d)'>\n        </polygon> */\n        \n      }\n\t\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t}\n</script>\n\n<style>\n\t#graphSvg{\n\t\tposition:absolute;\n\t\tleft:50px;\n\t\ttop:70px;\n\t\tbackground-color: rgb(255, 255, 255);\n\t\topacity:1;\n\t\tborder: 5px solid rgb(199, 198, 198);\n    border-radius: 50px;\n\t}\n\t#btnIndexLink ,#btnLink{\n\t\tposition:absolute;\n\t\theight :40px;\n\t\twidth : 90px;\n\t\trx:10px;\n\t}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}