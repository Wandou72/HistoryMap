{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, withScopeId as _withScopeId, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\n_pushScopeId(\"data-v-40f8edf6\");\n\nconst _hoisted_1 = {\n  id: \"svgC\"\n};\nconst _hoisted_2 = {\n  id: \"txt\"\n};\nconst _hoisted_3 = [\"y\"];\nconst _hoisted_4 = [\"dy\"];\n\n_popScopeId();\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"svg\", _hoisted_1, [_createElementVNode(\"text\", _hoisted_2, \"Select Mode:\" + _toDisplayString(_ctx.matrixFlag), 1\n  /* TEXT */\n  ), _createElementVNode(\"rect\", {\n    x: \"0\",\n    y: _ctx.heightC - 50,\n    height: \"50\",\n    width: \"60\",\n    fill: \"orange\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_3), _createElementVNode(\"text\", {\n    dx: \"30\",\n    dy: _ctx.heightC - 17,\n    \"text-anchor\": \"middle\",\n    fill: \"white\",\n    \"font-size\": \"25\",\n    \"font-weight\": \"bold\"\n  }, \"D \", 8\n  /* PROPS */\n  , _hoisted_4)]);\n}","map":{"version":3,"sources":["C:\\Users\\admin\\Desktop\\WYSIWYG\\归档\\src\\components\\componentC.vue"],"names":[],"mappings":";;;;;AAES,EAAA,EAAE,EAAG;;;AACN,EAAA,EAAE,EAAG;;;;;;;;uBADT,mBAAA,CAkBG,KAlBH,EAAA,UAAA,EAkBG,CAjBL,mBAAA,CAAkD,MAAlD,EAAA,UAAA,EAAiB,iBAAY,gBAAA,CAAE,IAAA,CAAA,UAAF,CAA7B,EAAyC;AAAA;AAAzC,GAiBK,EAhBL,mBAAA,CAMM,MANN,EAMM;AALP,IAAA,CAAC,EAAG,GAKG;AAJN,IAAA,CAAC,EAAI,IAAA,CAAA,OAAA,GAAO,EAIN;AAHP,IAAA,MAAM,EAAG,IAGF;AAFP,IAAA,KAAK,EAAG,IAED;AADP,IAAA,IAAI,EAAG;AACA,GANN,E,IAAA,E;;AAAA,I,UAAA,CAgBK,EATN,mBAAA,CAQO,MARP,EAQO;AAPP,IAAA,EAAE,EAAG,IAOE;AANN,IAAA,EAAE,EAAI,IAAA,CAAA,OAAA,GAAO,EAMP;AALP,mBAAc,QAKP;AAJP,IAAA,IAAI,EAAG,OAIA;AAHP,iBAAY,IAGL;AAFP,mBAAc;AAEP,GARP,EAOC,IAPD,EAQA;AAAA;AARA,IAQA,UARA,CASM,CAlBH,C","sourcesContent":["<template>\n\t\n    <svg id = \"svgC\" >\n\t\t<text id = 'txt'>Select Mode:{{matrixFlag}}</text>\n\t\t<rect\n\tx = 0\n\t:y = 'heightC - 50'\n\theight = 50\n\twidth = 60\n\tfill = 'orange'>\n\t</rect>\n\t<text\n\tdx = 30\n\t:dy = 'heightC - 17'\n\ttext-anchor = 'middle'\n\tfill = 'white'\n\tfont-size = 25\n\tfont-weight = 'bold'\n\t>D\n\t</text>\n\t</svg>\n\n</template>\n\n<script>\nimport * as d3 from \"d3\"\n\nimport axios from 'axios'\n\nexport default {\n\tname: 'componentC',\n\tdata(){\n\t\treturn {\n\t\t\theightC:this.$store.state.height * 0.4,\n\t\t\twidthC:this.$store.state.width * 0.3,\n\t\t\thovered:'',\n\t\t\tnodesLength:0,\n\t\t\t\n\t\t}\n\t},\n\tmounted(){\n\n\t\t// if(this.selected == ''){\n\t\t// \tthis.$store.commit({\n\t\t// \ttype:'changeDataD',\n\t\t// \tselected:\"半导体显示\",\n\t\t// \t})\n\t\t// }\n\t\t\n\n\t\tthis.$store.commit({\n\t\t\ttype:'appendBtn',\n\t\t\tsvgID:'svgC',\n\t\t\tbtnID:'Cbtn',\n\t\t\twidth:this.widthC,\n\t\t\ttext:'switch'\n\t\t})\n\t\t\n\t\td3.select(\"#svgC\").select(\"#Cbtn\")\n\t\t.on(\"click\",()=>{\n\t\t\tif(this.matrixFlag=='tree'){\n\t\t\t\tthis.$store.commit({\n\t\t\t\t\ttype:'changeMatrixFlag',\n\t\t\t\t\tflag:'matrix'\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.$store.commit({\n\t\t\t\t\ttype:'changeMatrixFlag',\n\t\t\t\t\tflag:'tree'\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}\n\t\t})\n\t\t.style(\"display\",'none')\n\t\t\n\t\td3.select(\"#txt\").attr(\"dy\",70).attr(\"dx\",this.widthC-150).style(\"display\",'none')\n\t\t//console.log(this.$store.state.data_overall)\n\t\td3.select(\"#svgC\")\n\t\t.attr(\"width\",this.widthC)\n\t\t.attr(\"height\",this.heightC);\n\t\t\t\t\n\t\t\n\t\tthis.$store.commit({\n\t\t\ttype:'appendTitle',\n\t\t\tid:'CTitle',\n\t\t\tclass:'classC',\n\t\t\tsvg:'svgC',\n\t\t\tdx:'24px',\n\t\t\tdy:'36px',\n\t\t\tsize:'20px'\n\t\t\t\n\t\t})\n\t\t\n\t\td3.select(\"#CTitle\").style(\"display\",'none')\n\t\t\n\t\t\n\t\taxios.get('china.sea.json')\n\t\t.then(res=>{\n\t\t\tthis.$store.commit({\n\t\t\t\ttype:'Cseajson',\n\t\t\t\tseajson:res\n\t\t\t})\n\t\t})\n\t\t.then(()=>{\n\t\t\tthis.createSea()\n\t\t})\n\t\t\n\t\taxios.get('china.geo.json')\n\t\t.then(response=>{\n\t\t\tthis.$store.commit({\n\t\t\t\ttype:'Cgeojson',\n\t\t\t\tgeojson:response\n\t\t\t})\n\t\t})\n\t\t.then(()=>{\n\t\t\tthis.createMap();\n\t\t})\n\t\t\n\t\td3.select(\"#svgC\").append(\"g\").attr(\"id\",\"Csea\")\n\t\t.style(\"display\",\"none\")\n\t\t\n\t\td3.select(\"#svgC\").append(\"g\").attr(\"id\",\"Cmap\")\n\t\t.style(\"display\",\"none\")\n\n\t},\n\tcomputed:{\n\n\t\tC_province(){\n\t\t\tlet a = [];\n\t\t\tlet C_temp = [];\n\t\t\tlet C_temp_sum = 0;\n\t\t\tfor(let i = 0;i<this.data_overall.length;i++){\n\t\t\t\tif(this.data_overall[i].name1 == this.selected || this.data_overall[i].name2 == this.selected||this.data_overall[i].name3 == this.selected||this.data_overall[i].name4 == this.selected\n\t\t\t\t||this.data_overall[i].name5 == this.selected||this.data_overall[i].name6 == this.selected||this.data_overall[i].name7 == this.selected||this.data_overall[i].name8 == this.selected){\n\t\t\t\t\tC_temp.push(this.data_overall[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(let i = 0;i<this.geojson.data.features.length;i++){\n\t\t\t\ta.push({name:this.geojson.data.features[i].properties.name,pat_num:0,pat_pro:0})\n\t\t\t}\n\t\t\t\n\t\t\tfor(let i = 0;i<C_temp.length;i++){\n\t\t\t\tfor(let j = 0;j<a.length;j++){\n\t\t\t\t\tif(C_temp[i].province.substring(0,2) == a[j].name.substring(0,2)){\n\t\t\t\t\t\ta[j].pat_num += parseInt(C_temp[i].patent_num)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(let i = 0;i<a.length;i++){\n\t\t\t\tC_temp_sum += a[i].pat_num\n\t\t\t}\n\t\t\t\n\t\t\tfor(let i = 0;i<a.length;i++){\n\t\t\t\ta[i].pat_pro = a[i].pat_num / C_temp_sum\n\t\t\t}\n\t\t\t\n\t\t\treturn a\n\t\t\t\n\t\t\t\n\t\t},\n\t\tmatrixElement1(){\n\t\t\treturn this.matrixElement+'1'\n\t\t},\n\t\tmatrixElement(){\n\t\t\treturn this.$store.state.matrixElement\n\t\t},\n\t\tmatrixFlag(){\n\t\t\treturn this.$store.state.matrixFlag\n\t\t},\n\t\ttreeD(){\n\t\t\treturn this.treeData +'1'\n\t\t},\n\t\ttreeData(){\n\t\t\t\treturn this.$store.state.objB.treeData\n\t\t},\n\t\tseajson(){\n\t\t\treturn this.$store.state.objC.seajson\n\t\t},\n\t\tgeojson(){\n\t\t\treturn this.$store.state.objC.geojson\n\t\t\t\n\t\t},\n\t\tdata_overall(){\n\t\t\treturn this.$store.state.data_overall\n\t\t},\n\t\tleaf(){\n\t\t\treturn this.$store.state.leaf\n\t\t},\n\t\tselected(){\n\t\t\treturn this.$store.state.selected\n\t\t},\n\t\tcolorScale(){\n\t\t\treturn d3.scale.linear().domain([0,0.5]).range([\"#c8ccf9\",\"#00007f\"])\n\t\t}\n\t},\n\tmethods:{\n\t\tC_TipRemove(){\n\t\t\td3.select(\"#svgC\").selectAll(\".tips\").remove()\n\t\t},\n\t\t// initial(){\n\t\t// \tif(this.selected == ''){\n\t\t// \t\tthis.$store.commit({\n\t\t// \t\ttype:'changeDataD',\n\t\t// \t\tselected:\"半导体显示\",\n\t\t// \t\t})\n\t\t// \t}\n\t\t// },\n\t\tC_createTip(d){\n\t\t\tfunction mouseXY(e){\n\t\t\t\t\t\t\te=e||window.event;\n\t\t\t\t\t\t\treturn { \"x\": e.offsetX, \"y\": e.offsetY };\n\t\t\t\t\t\t}\n\t\t\tlet XY = mouseXY(event);\n\t\t\tlet svgC = d3.select(\"#svgC\");\n\t\t\t\n\t\t\tsvgC.append(\"rect\")\n\t\t\t.attr(\"id\",\"tipBack\")\n\t\t\t.attr(\"class\",\"tips\")\n\t\t\t.attr(\"x\", XY.x+10)\n\t\t\t.attr(\"y\",XY.y-30)\n\t\t\t.style(\"width\",d.properties.name.length>8? d.properties.name.length *15 +10 :140)\n\t\t\t.attr(\"rx\",20);\n\t\t\t\n\t\t\tsvgC.append(\"text\")\n\t\t\t.attr(\"class\",\"tips\")\n\t\t\t.attr(\"dx\",XY.x+20)\n\t\t\t.attr(\"dy\",XY.y-5)\n\t\t\t.attr(\"text-anchor\",\"start\")\n\t\t\t.attr(\"font-family\", \"sans-serif\")\n\t\t\t.attr(\"font-size\", \"14px\")\n\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t.attr(\"fill\", \"white\")\n\t\t\t.text(this.transform(d.properties.name))\n\t\t\t\n\t\t\tsvgC.append(\"text\")\n\t\t\t.attr(\"class\",\"tips\")\n\t\t\t.attr(\"dx\",XY.x+20)\n\t\t\t.attr(\"dy\",XY.y+15)\n\t\t\t.attr(\"text-anchor\",\"start\")\n\t\t\t.attr(\"font-family\", \"sans-serif\")\n\t\t\t.attr(\"font-size\", \"14px\")\n\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t.attr(\"fill\", \"white\")\n\t\t\t.text(()=>{\n\t\t\t\tfor(let i = 0;i<this.C_province.length;i++){\n\t\t\t\t\tif(d.properties.name == this.C_province[i].name){\n\t\t\t\t\t\treturn  '专利份额:' + this.C_province[i].pat_pro.toFixed(4) ;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}) \n\t\t},\n\t\ttransform(name){\n\t\t\tfor(let i = 0;i<this.$store.state.province.length;i++){\n\t\t\t\tif (this.$store.state.province[i].substring(0,2) == name.substring(0,2)){\n\t\t\t\t\treturn this.$store.state.province[i]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcreateSea(){\n\t\t\tvar C_projection=d3.geo.mercator()\n\t\t\t.center([113,29]) //地图中心位置,107是经度，31是纬度\n\t\t\t.scale(350/1900 * this.$store.state.width) //设置缩放量\n\t\t\t.translate([this.widthC/2,this.heightC * 3 /5]); // 设置平移量\n\t\t\tvar C_path=d3.geo.path()\n\t\t\t.projection(C_projection);\n\t\t\n\t\t\t\n\t\t\t\n\t\t\td3.select(\"#Csea\").selectAll(\"path\")\n\t\t\t.data(this.seajson.data.features) // 绑定数据\n\t\t\t.enter()\n\t\t\t.append(\"path\")\n\t\t\t.attr(\"class\",\"path2\")\n\t\t\t.style(\"fill\",\"white\")\n\t\t\t.style(\"stroke\",\"black\")\n\t\t\t.style(\"stroke-width\",1)\n\t\t\t.attr(\"d\",C_path)\n\t\t\t\n\t\t\t\n\t\t},\n\t\tgetPatPro(d){\n\t\t\tfor(let i = 0;i<this.C_province.length;i++){\n\t\t\t\tif(d.properties.name == this.C_province[i].name){\n\t\t\t\t\treturn this.C_province[i].pat_pro \n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcreateMap(){\n\t\t\tvar C_projection=d3.geo.mercator()\n\t\t\t.center([113,29]) //地图中心位置,107是经度，31是纬度\n\t\t\t.scale(350/1900 * this.$store.state.width) //设置缩放量\n\t\t\t.translate([this.widthC/2,this.heightC * 3 /5]); // 设置平移量\n\t\t\t\n\t\t\tvar C_path=d3.geo.path()\n\t\t\t.projection(C_projection);\n\t\t\tlet svgC = d3.select(\"#svgC\");\n\t\t\tlet defs = d3.select(\"#svgC\").append(\"defs\");\n\t\t\tlet linearGradient2 = defs.append(\"linearGradient\")\n\t\t\t\t\t\t\t\t\t.attr(\"id\",\"linearColor4\")\n\t\t\t\t\t\t\t\t\t.attr(\"x1\",\"0%\")\n\t\t\t\t\t\t\t\t\t.attr(\"y1\",\"100%\")\n\t\t\t\t\t\t\t\t\t.attr(\"x2\",\"0%\")\n\t\t\t\t\t\t\t\t\t.attr(\"y2\",\"0%\");\n\t\t\t\n\t\t\tlinearGradient2.append(\"stop\")\n\t\t\t\t\t\t\t.attr(\"offset\",\"0%\")\n\t\t\t\t\t\t\t.style(\"stop-color\",\"#ffffff\");\n\t\t\t\n\t\t\tlinearGradient2.append(\"stop\")\n\t\t\t\t\t\t\t.attr(\"offset\",\"100%\")\n\t\t\t\t\t\t\t.style(\"stop-color\",\"#00007f\");\n\t\t\t\n\t\t\tlet lgd = svgC.append(\"g\").attr(\"id\",\"Clgd\")\n\t\t\t.style(\"display\",\"none\")\n\t\t\t.attr(\"transform\",'translate('+[0,20]+')')\n\t\t\tlgd.append(\"rect\")\n\t\t\t.attr(\"class\",\"lgdC\")\n\t\t\t\n\t\t\t.attr(\"x\",this.widthC * 9 / 10 +3)\n\t\t\t.attr(\"y\",this.heightC/5 )\n\t\t\t.attr(\"rx\",6)\n\t\t\t.attr(\"width\",12 )\n\t\t\t.attr(\"height\",this.heightC * 3 /5)\n\t\t\t.style(\"fill\",\"url(#\" + linearGradient2.attr(\"id\") + \")\");\n\t\t\t\n\t\t\tlgd.append(\"text\")\n\t\t\t.attr(\"class\",\"lgdC\")\n\t\t\t\n\t\t\t.attr(\"font-family\", \"sans-serif\")\n\t\t\t.style(\"font-size\", 15)\n\t\t\t.style(\"font-weight\",\"bold\")\n\t\t\t.attr(\"text-anchor\",\"middle\")\n\t\t\t.attr(\"dx\",this.widthC * 9 / 10 +10)\n\t\t\t.attr(\"dy\",this.heightC/5 -5 )\n\t\t\t.text(0.5);\n\t\t\t\n\t\t\tlgd.append(\"text\")\n\t\t\t.attr(\"class\",\"lgdC\")\n\t\t\t\n\t\t\t.attr(\"font-family\", \"sans-serif\")\n\t\t\t.style(\"font-size\", 15)\n\t\t\t.style(\"font-weight\",\"bold\")\n\t\t\t.attr(\"text-anchor\",\"middle\")\n\t\t\t.attr(\"dx\",this.widthC * 9 / 10 +10 )\n\t\t\t.attr(\"dy\",this.heightC/5 *4 +15)\n\t\t\t.text(0)\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\td3.select(\"#Cmap\").selectAll(\"path\")\n\t\t\t.data(this.geojson.data.features) // 绑定数据\n\t\t\t.enter()\n\t\t\t.append(\"path\")\n\t\t\t.attr(\"class\",\"path1\")\n\t\t\t.style(\"fill\",\"white\")\n\t\t\t.style(\"stroke\",\"black\")\n\t\t\t.style(\"stroke-width\",0.2)\n\t\t\t.attr(\"d\",C_path)\n\t\t\t.on(\"mouseover\",(d)=>{\n\t\t\t\tthis.hovered = d.properties.name\n\t\t\t\tthis.C_TipRemove()\n\t\t\t\tthis.C_createTip(d);\n\t\t\t\tthis.$store.commit({\n\t\t\t\t\ttype:'userMouseover'\n\t\t\t\t})\n\t\t\t})\n\t\t\t.on(\"mousemove\",d=>{\n\t\t\t\tthis.C_TipRemove();\n\t\t\t\tthis.C_createTip(d);\n\t\t\t})\n\t\t\t.on(\"mouseout\",(d)=>{\n\t\t\t\tthis.hovered = '';\n\t\t\t\tlet pro = this.getPatPro(d)\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.C_TipRemove()\n\t\t\t\t\t\t}, 1300);\n\t\t\t\tthis.$store.commit({\n\t\t\t\t\ttype:'userMouseout',\n\t\t\t\t\tview:'viewC',\n\t\t\t\t\tobj:'tips(province)',\n\t\t\t\t\twidth:this.widthC,\n\t\t\t\t\theight:this.heightC,\n\t\t\t\t\tname:this.transform(d.properties.name) +':' +this.selected,\n\t\t\t\t\tvalue:pro,\n\t\t\t\t\tdesc:'hover province: '' in ' + this.selected\n\t\t\t\t\t// desc:'the proportion of ' + this.transform(d.properties.name) + ' in ' + this.selected + ' is ' + pro.toFixed(3),\n          data:{\n            industry:this.selected,\n            company:[],\n            province:[this.transform(d.properties.name)],\n            attribute:'proportion'\n          }\n\t\t\t\t})\n\t\t\t})\n\t\t\t.on(\"click\",(d)=>{\n\t\t\t\tlet pro = this.getPatPro(d)\n\t\t\t\tthis.$store.commit({\n\t\t\t\t\ttype:\"elementClear\",\n\t\t\t\t\tflag:'province'\n\t\t\t\t})\n\t\t\t\tthis.$store.commit({\n\t\t\t\t\ttype:'userClick',\n\t\t\t\t\tview:'viewC',\n\t\t\t\t\twidth:this.widthC,\n\t\t\t\t\theight:this.heightC,\n\t\t\t\t\tobj:'select province',\n\t\t\t\t\tname:this.transform(d.properties.name) +':' +this.selected,\n\t\t\t\t\tvalue:pro,\n\t\t\t\t\tdesc: 'select province:' + this.selected\n\t\t\t\t\t// desc:'the proportion of ' + this.transform(d.properties.name) + ' in ' + this.selected + ' is ' + pro.toFixed(3),\n\t\t\t\t\tvisualKeys:{},\n\n          data:{\n            industry:this.selected,\n            company:[],\n            province:[this.transform(d.properties.name)],\n            attribute:'proportion'\n          }\n\t\t\t\t\t\n\t\t\t\t})\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(this.matrixFlag=='tree'){\n\t\t\t\t\tthis.$store.commit({\n\t\t\t\t\t\ttype:\"updateTreeData\",\n\t\t\t\t\t\t//treeTypeFlag :'province',\n\t\t\t\t\t\tname:this.transform(d.properties.name)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tthis.$store.commit({\n\t\t\t\t\t\ttype : 'changeMatrixElement',\n\t\t\t\t\t\telement : this.transform(d.properties.name)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\n\t\t\t})\n\t\t\t\n\t\t},\n\t\tC_update(){\n\t\t\t//console.log(this.C_province)\n\t\t\td3.select(\"#Cmap\").selectAll(\".path1\")\n\t\t\t.data(this.geojson.data.features)\n\t\t\t.style(\"stroke-width\",0.2)\n\t\t\t.transition()\n\t\t\t.style(\"stroke-width\",0.2)\n\t\t\t.style(\"fill\",d=>{\n\t\t\t\tfor(let i = 0;i<this.C_province.length;i++){\n\t\t\t\t\tif(d.properties.name == this.C_province[i].name){\n\t\t\t\t\t\treturn this.C_province[i].pat_pro == 0? \"white\" :this.colorScale(this.C_province[i].pat_pro);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t\n\t\t},\n\t\tinData(d,dataset){\n\t\t\tlet a = this.transform(d.properties.name);\n\t\t\tif(dataset.indexOf(a) != -1){\n\t\t\t\treturn true\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t\n\t},\n\twatch:{\n\t\tselected(val){\n\t\t\t\t\n\t\t\t\td3.select(\"#Cmap\")\n\t\t\t\t.style(\"display\",'inline');\n\t\t\t\td3.select(\"#Csea\")\n\t\t\t\t.style(\"display\",'inline');\n\t\t\t\td3.select(\"#Clgd\")\n\t\t\t\t.style(\"display\",'inline');\n\t\t\t\td3.select(\"#CTitle\")\n\t\t\t\t.style(\"display\",'inline')\n\t\t\t\t.text(val + '产业地区分布图');\n\t\t\t\td3.select(\"#Cbtn\")\n\t\t\t\t.style(\"display\",'inline')\n\t\t\t\td3.select(\"#svgC\").select(\"#txt\")\n\t\t\t\t.style(\"display\",'inline')\n\t\t\t\tthis.C_update()\n\t\t\t\n\t\t\t\n\t\t},\n\t\ttreeD(){\n\t\t\td3.select(\"#svgC\").selectAll(\".path1\")\n\t\t\t.filter(d=>this.inData(d,this.treeData))\n\t\t\t.style(\"fill\",\"#06ddf4\");\n\t\t\t\n\t\t\td3.select(\"#svgC\").selectAll(\".path1\")\n\t\t\t.filter(d=>!this.inData(d,this.treeData))\n\t\t\t.style(\"fill\",d=>{\n\t\t\t\tfor(let i = 0;i<this.C_province.length;i++){\n\t\t\t\t\tif(d.properties.name == this.C_province[i].name){\n\t\t\t\t\t\treturn this.C_province[i].pat_pro == 0? \"white\" :this.colorScale(this.C_province[i].pat_pro);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\thovered(val){\n\t\t\t\n\t\t\td3.select(\"#Cmap\").selectAll(\".path1\")\n\t\t\t.data(this.geojson.data.features)\n\t\t\t.filter(d=>val == d.properties.name ||this.inData(d,this.treeData))\n\t\t\t.style(\"fill\",'#06ddf4');\n\t\t\t\n\t\t\td3.select(\"#Cmap\").selectAll(\".path1\")\n\t\t\t.data(this.geojson.data.features)\n\t\t\t.filter(d=>val != d.properties.name && !this.inData(d,this.treeData) )\n\t\t\t.style(\"fill\",d=>{\n\t\t\t\tfor(let i = 0;i<this.C_province.length;i++){\n\t\t\t\t\tif(d.properties.name == this.C_province[i].name){\n\t\t\t\t\t\treturn this.C_province[i].pat_pro == 0? \"white\" :this.colorScale(this.C_province[i].pat_pro);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t\n\t\t},\n\t\tmatrixElement1(){\n\t\t\td3.select(\"#svgC\").selectAll(\".path1\")\n\t\t\t.filter(d=>this.inData(d,this.matrixElement))\n\t\t\t.style(\"stroke\",\"red\")\n\t\t\t.style(\"stroke-width\",1);\n\t\t\t\n\t\t\td3.select(\"#svgC\").selectAll(\".path1\")\n\t\t\t.filter(d=>!this.inData(d,this.matrixElement))\n\t\t\t.style(\"stroke\",\"black\")\n\t\t\t.style(\"stroke-width\",0.2);\n\t\t}\n\t},\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}